{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sk6dNhq3dA-2"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import stats\n","from sklearn.metrics import mean_squared_error\n","\n","import xgboost as xgb\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","import pandas as pd\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","file_path = '/content/drive/My Drive/claims_data.csv'\n","df = pd.read_csv(file_path)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":253},"id":"krRtY2hhdvqv","executionInfo":{"status":"ok","timestamp":1726428003010,"user_tz":240,"elapsed":20370,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"a0b052ea-9bf5-4e2d-85d8-a3beb99e810a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"execute_result","data":{"text/plain":["   id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont6     cont7  \\\n","0   1    A    B    A    B    A    A    A    A    B  ...  0.718367  0.335060   \n","1   2    A    B    A    A    A    A    A    A    B  ...  0.438917  0.436585   \n","2   5    A    B    A    A    B    A    A    A    B  ...  0.289648  0.315545   \n","3  10    B    B    A    B    A    A    A    A    B  ...  0.440945  0.391128   \n","4  11    A    B    A    B    A    A    A    A    B  ...  0.178193  0.247408   \n","\n","     cont8    cont9   cont10    cont11    cont12    cont13    cont14     loss  \n","0  0.30260  0.67135  0.83510  0.569745  0.594646  0.822493  0.714843  2213.18  \n","1  0.60087  0.35127  0.43919  0.338312  0.366307  0.611431  0.304496  1283.60  \n","2  0.27320  0.26076  0.32446  0.381398  0.373424  0.195709  0.774425  3005.09  \n","3  0.31796  0.32128  0.44467  0.327915  0.321570  0.605077  0.602642   939.85  \n","4  0.24564  0.22089  0.21230  0.204687  0.202213  0.246011  0.432606  2763.85  \n","\n","[5 rows x 132 columns]"],"text/html":["\n","  <div id=\"df-a2a65f6e-4c37-46aa-b8c2-12311bfbcd81\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>cat1</th>\n","      <th>cat2</th>\n","      <th>cat3</th>\n","      <th>cat4</th>\n","      <th>cat5</th>\n","      <th>cat6</th>\n","      <th>cat7</th>\n","      <th>cat8</th>\n","      <th>cat9</th>\n","      <th>...</th>\n","      <th>cont6</th>\n","      <th>cont7</th>\n","      <th>cont8</th>\n","      <th>cont9</th>\n","      <th>cont10</th>\n","      <th>cont11</th>\n","      <th>cont12</th>\n","      <th>cont13</th>\n","      <th>cont14</th>\n","      <th>loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.718367</td>\n","      <td>0.335060</td>\n","      <td>0.30260</td>\n","      <td>0.67135</td>\n","      <td>0.83510</td>\n","      <td>0.569745</td>\n","      <td>0.594646</td>\n","      <td>0.822493</td>\n","      <td>0.714843</td>\n","      <td>2213.18</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.438917</td>\n","      <td>0.436585</td>\n","      <td>0.60087</td>\n","      <td>0.35127</td>\n","      <td>0.43919</td>\n","      <td>0.338312</td>\n","      <td>0.366307</td>\n","      <td>0.611431</td>\n","      <td>0.304496</td>\n","      <td>1283.60</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.289648</td>\n","      <td>0.315545</td>\n","      <td>0.27320</td>\n","      <td>0.26076</td>\n","      <td>0.32446</td>\n","      <td>0.381398</td>\n","      <td>0.373424</td>\n","      <td>0.195709</td>\n","      <td>0.774425</td>\n","      <td>3005.09</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>B</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.440945</td>\n","      <td>0.391128</td>\n","      <td>0.31796</td>\n","      <td>0.32128</td>\n","      <td>0.44467</td>\n","      <td>0.327915</td>\n","      <td>0.321570</td>\n","      <td>0.605077</td>\n","      <td>0.602642</td>\n","      <td>939.85</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.178193</td>\n","      <td>0.247408</td>\n","      <td>0.24564</td>\n","      <td>0.22089</td>\n","      <td>0.21230</td>\n","      <td>0.204687</td>\n","      <td>0.202213</td>\n","      <td>0.246011</td>\n","      <td>0.432606</td>\n","      <td>2763.85</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 132 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2a65f6e-4c37-46aa-b8c2-12311bfbcd81')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a2a65f6e-4c37-46aa-b8c2-12311bfbcd81 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a2a65f6e-4c37-46aa-b8c2-12311bfbcd81');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fcb44d0e-2eb7-47f1-be9d-6947d2956981\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fcb44d0e-2eb7-47f1-be9d-6947d2956981')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fcb44d0e-2eb7-47f1-be9d-6947d2956981 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["# 2.4 Feature aggregation"],"metadata":{"id":"NvEOckK74KGw"}},{"cell_type":"code","source":["# Compute the correlation matrix\n","corr = df[df.columns[df.columns.str.startswith('cont')]].corr()\n","\n","# Find pairs of features with high correlation\n","high_corr_pairs = corr.abs().unstack().sort_values(ascending=False)\n","high_corr_pairs = high_corr_pairs[high_corr_pairs < 1]  # Exclude self-correlation\n","\n","print(\"\\nHigh Correlation Pairs:\")\n","print(high_corr_pairs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SlIveQfV4Hi-","executionInfo":{"status":"ok","timestamp":1726428004755,"user_tz":240,"elapsed":224,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"a92cf546-35bd-4985-c92f-85110e0a444e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","High Correlation Pairs:\n","cont11  cont12    0.994384\n","cont12  cont11    0.994384\n","cont1   cont9     0.929912\n","cont9   cont1     0.929912\n","cont6   cont10    0.883351\n","                    ...   \n","        cont2     0.015864\n","cont5   cont8     0.009015\n","cont8   cont5     0.009015\n","cont12  cont3     0.006111\n","cont3   cont12    0.006111\n","Length: 182, dtype: float64\n"]}]},{"cell_type":"code","source":["# Combine features into a new features when they have a correlation of 88 or greater\n","df['average_cont9_cont1'] = (df['cont1'] + df['cont9']) / 2\n","df['average_cont10_cont6'] = (df['cont6'] + df['cont10']) / 2\n","df['average_cont12_cont11'] = (df['cont11'] + df['cont12']) / 2\n","\n","# Drop the original features\n","df = df.drop(columns=['cont1', 'cont9', 'cont6', 'cont10', 'cont11', 'cont12'])\n","\n","print(\"\\nDataFrame after removing original features:\")\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CchcEuGF8S6A","executionInfo":{"status":"ok","timestamp":1726428006995,"user_tz":240,"elapsed":423,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"1861fdf0-a08c-4fcf-c149-4703cdfecade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","DataFrame after removing original features:\n","            id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont4  \\\n","0            1    A    B    A    B    A    A    A    A    B  ...  0.789639   \n","1            2    A    B    A    A    A    A    A    A    B  ...  0.614134   \n","2            5    A    B    A    A    B    A    A    A    B  ...  0.236924   \n","3           10    B    B    A    B    A    A    A    A    B  ...  0.373816   \n","4           11    A    B    A    B    A    A    A    A    B  ...  0.473202   \n","...        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...   \n","188313  587620    A    B    A    A    A    A    A    A    B  ...  0.473202   \n","188314  587624    A    A    A    A    A    B    A    A    A  ...  0.802892   \n","188315  587630    A    B    A    A    A    A    A    B    B  ...  0.189137   \n","188316  587632    A    B    A    A    A    A    A    A    B  ...  0.383428   \n","188317  587633    B    A    A    B    A    A    A    A    A  ...  0.821574   \n","\n","           cont5     cont7    cont8    cont13    cont14     loss  \\\n","0       0.310061  0.335060  0.30260  0.822493  0.714843  2213.18   \n","1       0.885834  0.436585  0.60087  0.611431  0.304496  1283.60   \n","2       0.397069  0.315545  0.27320  0.195709  0.774425  3005.09   \n","3       0.422268  0.391128  0.31796  0.605077  0.602642   939.85   \n","4       0.704268  0.247408  0.24564  0.246011  0.432606  2763.85   \n","...          ...       ...      ...       ...       ...      ...   \n","188313  0.939556  0.289949  0.24564  0.333292  0.208216  1198.62   \n","188314  0.704268  0.382000  0.63475  0.318646  0.305872  1108.34   \n","188315  0.482436  0.370534  0.24564  0.339244  0.503888  5762.64   \n","188316  0.340543  0.562866  0.34987  0.654753  0.721707  1562.87   \n","188317  0.281143  0.533048  0.97123  0.810511  0.721460  4751.72   \n","\n","       average_cont9_cont1 average_cont10_cont6 average_cont12_cont11  \n","0                 0.698825             0.776733              0.582195  \n","1                 0.340892             0.439053              0.352309  \n","2                 0.261300             0.307054              0.377411  \n","3                 0.321437             0.442808              0.324743  \n","4                 0.247047             0.195246              0.203450  \n","...                    ...                  ...                   ...  \n","188313            0.327997             0.285894              0.221521  \n","188314            0.456106             0.406030              0.304775  \n","188315            0.471274             0.411836              0.444494  \n","188316            0.443028             0.621587              0.857959  \n","188317            0.920551             0.841352              0.939314  \n","\n","[188318 rows x 129 columns]\n"]}]},{"cell_type":"markdown","source":["# Categorical data"],"metadata":{"id":"jvGEbCBU6ldZ"}},{"cell_type":"code","source":["cat_columns = [col for col in df.columns if col.startswith('cat')]\n","print(cat_columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qk3GUarY6qax","executionInfo":{"status":"ok","timestamp":1726428010171,"user_tz":240,"elapsed":192,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"7a1b88b0-32ad-4264-8815-a86c9e55fb76"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57', 'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64', 'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71', 'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78', 'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85', 'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92', 'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99', 'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106', 'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113', 'cat114', 'cat115', 'cat116']\n"]}]},{"cell_type":"code","source":["from scipy.stats import chi2_contingency\n","\n","# Split columns into five groups ( we have 116 cat feartures)\n","group_1 = cat_columns[:25]\n","group_2 = cat_columns[25:50]\n","group_3 = cat_columns[50:75]\n","group_4 = cat_columns[75:100]\n","group_5 = cat_columns[100:]\n","\n","# Store groups in a list\n","groups = [group_1, group_2, group_3, group_4, group_5]\n","\n","# Store the pairs with a corr of .88 or higher\n","high_corr_pairs = {}\n","\n","# Function to calculate CramÃ©r's V\n","def cramers_v(x, y):\n","    confusion_matrix = pd.crosstab(x, y)\n","    chi2 = chi2_contingency(confusion_matrix)[0]\n","    n = confusion_matrix.sum().sum()\n","    phi2 = chi2 / n\n","    r, k = confusion_matrix.shape\n","    phi2corr = max(0, phi2 - ((k-1)*(r-1))/(n-1))\n","    rcorr = r - ((r-1)**2)/(n-1)\n","    kcorr = k - ((k-1)**2)/(n-1)\n","    return np.sqrt(phi2corr / min((kcorr-1), (rcorr-1)))\n","\n","# Loop over pairs of groups\n","for i in range(len(groups)):\n","    for j in range(i, len(groups)):\n","        group1 = groups[i]\n","        group2 = groups[j]\n","\n","        # Initialize a DataFrame to store CramÃ©r's V values\n","        cramers_v_matrix = pd.DataFrame(index=group1, columns=group2)\n","\n","        # Calculate CramÃ©r's V for each pair of categorical columns between the two groups\n","        for col1 in group1:\n","            for col2 in group2:\n","                cramers_v_matrix.loc[col1, col2] = cramers_v(df[col1], df[col2])\n","                if cramers_v(df[col1], df[col2]) == 1:\n","                    high_corr_pairs[(col1, col2)] = cramers_v(df[col1], df[col2])\n","\n","        # Convert the matrix to numeric\n","        cramers_v_matrix = cramers_v_matrix.astype(float)\n","\n","        annotations = cramers_v_matrix.applymap(lambda x: f'{x:.2f}'[1:])\n","\n","        # Plot the heatmap\n","        plt.figure(figsize=(15, 15))\n","        mask = np.triu(np.ones_like(cramers_v_matrix, dtype=bool))  # Mask to display only the lower triangle\n","        sns.heatmap(cramers_v_matrix, mask=mask, annot=annotations, cmap='coolwarm', cbar=True, fmt='', annot_kws={\"size\": 10, \"weight\": \"bold\", \"va\": 'center'})\n","        plt.title(f\"Heatmap of CramÃ©r's V: Group {i+1} vs Group {j+1}\")\n","        plt.show()"],"metadata":{"id":"CK4Khvor-fjl","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1kIBQ5lnGdisov9rRvWh5Yf71UrtG0C9V"},"executionInfo":{"status":"ok","timestamp":1726428414460,"user_tz":240,"elapsed":403073,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"7b6988ee-6e99-41d7-a998-66fb23ac1cce"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["# Display the high correlation pairs and their correlation values\n","unique_pairs = set()\n","\n","for pair, value in high_corr_pairs.items():\n","    # Sort the pair to avoid duplicates\n","    sorted_pair = tuple(sorted(pair))\n","\n","    # Check if the pair is not a self-correlation and hasn't been displayed yet\n","    if pair[0] != pair[1] and sorted_pair not in unique_pairs:\n","        print(f\"Pair: {sorted_pair}, Correlation: {value:.2f}\")\n","        unique_pairs.add(sorted_pair)"],"metadata":{"id":"RMlyq6uQdWow"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop featues with a 1.0 corr\n","for pair in unique_pairs:\n","    feature1, feature2 = pair\n","    new_feature_name = f'cat_{feature1}_{feature2}'\n","\n","    # Create the new feature as the average of the two correlated features\n","    df[new_feature_name] = df[feature1]\n","\n","    # Drop the original features\n","    df = df.drop(columns=[feature1, feature2])\n","\n","# Print the DataFrame after removing original features\n","print(\"\\nDataFrame after removing original features:\")\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Ct-L-4seqbQ","executionInfo":{"status":"ok","timestamp":1725827085396,"user_tz":240,"elapsed":224,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"41a6ead2-2a87-4978-e4a1-b4836b8b43f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","DataFrame after removing original features:\n","            id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont4  \\\n","0            1    A    B    A    B    A    A    A    A    B  ...  0.789639   \n","1            2    A    B    A    A    A    A    A    A    B  ...  0.614134   \n","2            5    A    B    A    A    B    A    A    A    B  ...  0.236924   \n","3           10    B    B    A    B    A    A    A    A    B  ...  0.373816   \n","4           11    A    B    A    B    A    A    A    A    B  ...  0.473202   \n","...        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...   \n","188313  587620    A    B    A    A    A    A    A    A    B  ...  0.473202   \n","188314  587624    A    A    A    A    A    B    A    A    A  ...  0.802892   \n","188315  587630    A    B    A    A    A    A    A    B    B  ...  0.189137   \n","188316  587632    A    B    A    A    A    A    A    A    B  ...  0.383428   \n","188317  587633    B    A    A    B    A    A    A    A    A  ...  0.821574   \n","\n","           cont5     cont7    cont8    cont13    cont14     loss  \\\n","0       0.310061  0.335060  0.30260  0.822493  0.714843  2213.18   \n","1       0.885834  0.436585  0.60087  0.611431  0.304496  1283.60   \n","2       0.397069  0.315545  0.27320  0.195709  0.774425  3005.09   \n","3       0.422268  0.391128  0.31796  0.605077  0.602642   939.85   \n","4       0.704268  0.247408  0.24564  0.246011  0.432606  2763.85   \n","...          ...       ...      ...       ...       ...      ...   \n","188313  0.939556  0.289949  0.24564  0.333292  0.208216  1198.62   \n","188314  0.704268  0.382000  0.63475  0.318646  0.305872  1108.34   \n","188315  0.482436  0.370534  0.24564  0.339244  0.503888  5762.64   \n","188316  0.340543  0.562866  0.34987  0.654753  0.721707  1562.87   \n","188317  0.281143  0.533048  0.97123  0.810511  0.721460  4751.72   \n","\n","       average_cont9_cont1 average_cont10_cont6 average_cont12_cont11  \n","0                 0.698825             0.776733              0.582195  \n","1                 0.340892             0.439053              0.352309  \n","2                 0.261300             0.307054              0.377411  \n","3                 0.321437             0.442808              0.324743  \n","4                 0.247047             0.195246              0.203450  \n","...                    ...                  ...                   ...  \n","188313            0.327997             0.285894              0.221521  \n","188314            0.456106             0.406030              0.304775  \n","188315            0.471274             0.411836              0.444494  \n","188316            0.443028             0.621587              0.857959  \n","188317            0.920551             0.841352              0.939314  \n","\n","[188318 rows x 129 columns]\n"]}]},{"cell_type":"markdown","source":["#2.5 Encoding categorical data"],"metadata":{"id":"gKaxs9UMlKGD"}},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","\n","\n","# Select the categorical columns\n","cat_columns = df.select_dtypes(include=['object']).columns.tolist()\n","\n","# Apply label encoding for 'cat116'\n","if 'cat116' in cat_columns:\n","    label_encoder = LabelEncoder()\n","    df['cat116_encoded'] = label_encoder.fit_transform(df['cat116'])\n","    cat_columns.remove('cat116')  # Remove 'cat116' after encoding\n","\n","# Initialize OneHotEncoder for the remaining categorical columns\n","encoder = OneHotEncoder(sparse_output=False)\n","\n","# One-hot encode the remaining categorical columns\n","one_hot_encoded = encoder.fit_transform(df[cat_columns])\n","\n","# Create a DataFrame for the one-hot encoded variables\n","one_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(cat_columns))\n","\n","# Concatenate the original DataFrame with the new one-hot encoded columns\n","df = pd.concat([df.drop(cat_columns + ['cat116'], axis=1), one_hot_df], axis=1)\n","\n","# Display results\n","print(f\"Encoded data:\\n{df.head()}\")\n","print(\"\\nColumns after encoding:\\n\", df.columns.tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Z38Sc4_nHI-","executionInfo":{"status":"ok","timestamp":1725830041018,"user_tz":240,"elapsed":14266,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"e3576c71-febc-4b76-87e3-121266c69896"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Encoded data:\n","   id     cont2     cont3     cont4     cont5     cont7    cont8    cont13  \\\n","0   1  0.245921  0.187583  0.789639  0.310061  0.335060  0.30260  0.822493   \n","1   2  0.737068  0.592681  0.614134  0.885834  0.436585  0.60087  0.611431   \n","2   5  0.358319  0.484196  0.236924  0.397069  0.315545  0.27320  0.195709   \n","3  10  0.555782  0.527991  0.373816  0.422268  0.391128  0.31796  0.605077   \n","4  11  0.159990  0.527991  0.473202  0.704268  0.247408  0.24564  0.246011   \n","\n","     cont14     loss  ...  cat115_N  cat115_O  cat115_P  cat115_Q  cat115_R  \\\n","0  0.714843  2213.18  ...       0.0       1.0       0.0       0.0       0.0   \n","1  0.304496  1283.60  ...       0.0       1.0       0.0       0.0       0.0   \n","2  0.774425  3005.09  ...       0.0       0.0       0.0       0.0       0.0   \n","3  0.602642   939.85  ...       0.0       1.0       0.0       0.0       0.0   \n","4  0.432606  2763.85  ...       0.0       0.0       0.0       0.0       0.0   \n","\n","   cat115_S  cat115_T  cat115_U  cat115_W  cat115_X  \n","0       0.0       0.0       0.0       0.0       0.0  \n","1       0.0       0.0       0.0       0.0       0.0  \n","2       0.0       0.0       0.0       0.0       0.0  \n","3       0.0       0.0       0.0       0.0       0.0  \n","4       0.0       0.0       0.0       0.0       0.0  \n","\n","[5 rows x 827 columns]\n","\n","Columns after encoding:\n"," ['id', 'cont2', 'cont3', 'cont4', 'cont5', 'cont7', 'cont8', 'cont13', 'cont14', 'loss', 'average_cont9_cont1', 'average_cont10_cont6', 'average_cont12_cont11', 'cat116_encoded', 'cat1_A', 'cat1_B', 'cat2_A', 'cat2_B', 'cat3_A', 'cat3_B', 'cat4_A', 'cat4_B', 'cat5_A', 'cat5_B', 'cat6_A', 'cat6_B', 'cat7_A', 'cat7_B', 'cat8_A', 'cat8_B', 'cat9_A', 'cat9_B', 'cat10_A', 'cat10_B', 'cat11_A', 'cat11_B', 'cat12_A', 'cat12_B', 'cat13_A', 'cat13_B', 'cat14_A', 'cat14_B', 'cat15_A', 'cat15_B', 'cat16_A', 'cat16_B', 'cat17_A', 'cat17_B', 'cat18_A', 'cat18_B', 'cat19_A', 'cat19_B', 'cat20_A', 'cat20_B', 'cat21_A', 'cat21_B', 'cat22_A', 'cat22_B', 'cat23_A', 'cat23_B', 'cat24_A', 'cat24_B', 'cat25_A', 'cat25_B', 'cat26_A', 'cat26_B', 'cat27_A', 'cat27_B', 'cat28_A', 'cat28_B', 'cat29_A', 'cat29_B', 'cat30_A', 'cat30_B', 'cat31_A', 'cat31_B', 'cat32_A', 'cat32_B', 'cat33_A', 'cat33_B', 'cat34_A', 'cat34_B', 'cat35_A', 'cat35_B', 'cat36_A', 'cat36_B', 'cat37_A', 'cat37_B', 'cat38_A', 'cat38_B', 'cat39_A', 'cat39_B', 'cat40_A', 'cat40_B', 'cat41_A', 'cat41_B', 'cat42_A', 'cat42_B', 'cat43_A', 'cat43_B', 'cat44_A', 'cat44_B', 'cat45_A', 'cat45_B', 'cat46_A', 'cat46_B', 'cat47_A', 'cat47_B', 'cat48_A', 'cat48_B', 'cat49_A', 'cat49_B', 'cat50_A', 'cat50_B', 'cat51_A', 'cat51_B', 'cat52_A', 'cat52_B', 'cat53_A', 'cat53_B', 'cat54_A', 'cat54_B', 'cat55_A', 'cat55_B', 'cat56_A', 'cat56_B', 'cat57_A', 'cat57_B', 'cat58_A', 'cat58_B', 'cat59_A', 'cat59_B', 'cat60_A', 'cat60_B', 'cat61_A', 'cat61_B', 'cat62_A', 'cat62_B', 'cat63_A', 'cat63_B', 'cat64_A', 'cat64_B', 'cat65_A', 'cat65_B', 'cat66_A', 'cat66_B', 'cat67_A', 'cat67_B', 'cat68_A', 'cat68_B', 'cat69_A', 'cat69_B', 'cat70_A', 'cat70_B', 'cat71_A', 'cat71_B', 'cat72_A', 'cat72_B', 'cat73_A', 'cat73_B', 'cat73_C', 'cat74_A', 'cat74_B', 'cat74_C', 'cat75_A', 'cat75_B', 'cat75_C', 'cat76_A', 'cat76_B', 'cat76_C', 'cat77_A', 'cat77_B', 'cat77_C', 'cat77_D', 'cat78_A', 'cat78_B', 'cat78_C', 'cat78_D', 'cat79_A', 'cat79_B', 'cat79_C', 'cat79_D', 'cat80_A', 'cat80_B', 'cat80_C', 'cat80_D', 'cat81_A', 'cat81_B', 'cat81_C', 'cat81_D', 'cat82_A', 'cat82_B', 'cat82_C', 'cat82_D', 'cat83_A', 'cat83_B', 'cat83_C', 'cat83_D', 'cat84_A', 'cat84_B', 'cat84_C', 'cat84_D', 'cat85_A', 'cat85_B', 'cat85_C', 'cat85_D', 'cat86_A', 'cat86_B', 'cat86_C', 'cat86_D', 'cat87_A', 'cat87_B', 'cat87_C', 'cat87_D', 'cat88_A', 'cat88_B', 'cat88_D', 'cat88_E', 'cat89_A', 'cat89_B', 'cat89_C', 'cat89_D', 'cat89_E', 'cat89_G', 'cat89_H', 'cat89_I', 'cat90_A', 'cat90_B', 'cat90_C', 'cat90_D', 'cat90_E', 'cat90_F', 'cat90_G', 'cat91_A', 'cat91_B', 'cat91_C', 'cat91_D', 'cat91_E', 'cat91_F', 'cat91_G', 'cat91_H', 'cat92_A', 'cat92_B', 'cat92_C', 'cat92_D', 'cat92_F', 'cat92_H', 'cat92_I', 'cat93_A', 'cat93_B', 'cat93_C', 'cat93_D', 'cat93_E', 'cat94_A', 'cat94_B', 'cat94_C', 'cat94_D', 'cat94_E', 'cat94_F', 'cat94_G', 'cat95_A', 'cat95_B', 'cat95_C', 'cat95_D', 'cat95_E', 'cat96_A', 'cat96_B', 'cat96_C', 'cat96_D', 'cat96_E', 'cat96_F', 'cat96_G', 'cat96_I', 'cat97_A', 'cat97_B', 'cat97_C', 'cat97_D', 'cat97_E', 'cat97_F', 'cat97_G', 'cat98_A', 'cat98_B', 'cat98_C', 'cat98_D', 'cat98_E', 'cat99_C', 'cat99_D', 'cat99_E', 'cat99_F', 'cat99_G', 'cat99_H', 'cat99_I', 'cat99_J', 'cat99_K', 'cat99_M', 'cat99_N', 'cat99_O', 'cat99_P', 'cat99_R', 'cat99_S', 'cat99_T', 'cat100_A', 'cat100_B', 'cat100_C', 'cat100_D', 'cat100_E', 'cat100_F', 'cat100_G', 'cat100_H', 'cat100_I', 'cat100_J', 'cat100_K', 'cat100_L', 'cat100_M', 'cat100_N', 'cat100_O', 'cat101_A', 'cat101_B', 'cat101_C', 'cat101_D', 'cat101_E', 'cat101_F', 'cat101_G', 'cat101_H', 'cat101_I', 'cat101_J', 'cat101_K', 'cat101_L', 'cat101_M', 'cat101_N', 'cat101_O', 'cat101_Q', 'cat101_R', 'cat101_S', 'cat101_U', 'cat102_A', 'cat102_B', 'cat102_C', 'cat102_D', 'cat102_E', 'cat102_F', 'cat102_G', 'cat102_H', 'cat102_J', 'cat103_A', 'cat103_B', 'cat103_C', 'cat103_D', 'cat103_E', 'cat103_F', 'cat103_G', 'cat103_H', 'cat103_I', 'cat103_J', 'cat103_K', 'cat103_L', 'cat103_N', 'cat104_A', 'cat104_B', 'cat104_C', 'cat104_D', 'cat104_E', 'cat104_F', 'cat104_G', 'cat104_H', 'cat104_I', 'cat104_J', 'cat104_K', 'cat104_L', 'cat104_M', 'cat104_N', 'cat104_O', 'cat104_P', 'cat104_Q', 'cat105_A', 'cat105_B', 'cat105_C', 'cat105_D', 'cat105_E', 'cat105_F', 'cat105_G', 'cat105_H', 'cat105_I', 'cat105_J', 'cat105_K', 'cat105_L', 'cat105_M', 'cat105_N', 'cat105_O', 'cat105_P', 'cat105_Q', 'cat105_R', 'cat105_S', 'cat105_T', 'cat106_A', 'cat106_B', 'cat106_C', 'cat106_D', 'cat106_E', 'cat106_F', 'cat106_G', 'cat106_H', 'cat106_I', 'cat106_J', 'cat106_K', 'cat106_L', 'cat106_M', 'cat106_N', 'cat106_O', 'cat106_P', 'cat106_R', 'cat107_A', 'cat107_B', 'cat107_C', 'cat107_D', 'cat107_E', 'cat107_F', 'cat107_G', 'cat107_H', 'cat107_I', 'cat107_J', 'cat107_K', 'cat107_L', 'cat107_M', 'cat107_N', 'cat107_O', 'cat107_P', 'cat107_Q', 'cat107_R', 'cat107_S', 'cat107_U', 'cat108_A', 'cat108_B', 'cat108_C', 'cat108_D', 'cat108_E', 'cat108_F', 'cat108_G', 'cat108_H', 'cat108_I', 'cat108_J', 'cat108_K', 'cat109_A', 'cat109_AA', 'cat109_AB', 'cat109_AE', 'cat109_AF', 'cat109_AG', 'cat109_AH', 'cat109_AI', 'cat109_AJ', 'cat109_AK', 'cat109_AL', 'cat109_AM', 'cat109_AN', 'cat109_AO', 'cat109_AP', 'cat109_AQ', 'cat109_AR', 'cat109_AS', 'cat109_AT', 'cat109_AU', 'cat109_AV', 'cat109_AW', 'cat109_AX', 'cat109_AY', 'cat109_B', 'cat109_BA', 'cat109_BB', 'cat109_BC', 'cat109_BD', 'cat109_BE', 'cat109_BF', 'cat109_BG', 'cat109_BH', 'cat109_BI', 'cat109_BJ', 'cat109_BK', 'cat109_BL', 'cat109_BM', 'cat109_BN', 'cat109_BO', 'cat109_BP', 'cat109_BQ', 'cat109_BR', 'cat109_BS', 'cat109_BT', 'cat109_BU', 'cat109_BV', 'cat109_BX', 'cat109_BY', 'cat109_C', 'cat109_CA', 'cat109_CB', 'cat109_CC', 'cat109_CD', 'cat109_CE', 'cat109_CF', 'cat109_CG', 'cat109_CH', 'cat109_CI', 'cat109_CJ', 'cat109_CK', 'cat109_CL', 'cat109_D', 'cat109_E', 'cat109_F', 'cat109_G', 'cat109_H', 'cat109_I', 'cat109_J', 'cat109_K', 'cat109_L', 'cat109_M', 'cat109_N', 'cat109_O', 'cat109_P', 'cat109_Q', 'cat109_R', 'cat109_S', 'cat109_T', 'cat109_U', 'cat109_V', 'cat109_X', 'cat109_Y', 'cat109_ZZ', 'cat110_A', 'cat110_AA', 'cat110_AB', 'cat110_AC', 'cat110_AD', 'cat110_AE', 'cat110_AF', 'cat110_AG', 'cat110_AH', 'cat110_AI', 'cat110_AJ', 'cat110_AK', 'cat110_AL', 'cat110_AM', 'cat110_AN', 'cat110_AO', 'cat110_AP', 'cat110_AR', 'cat110_AS', 'cat110_AT', 'cat110_AU', 'cat110_AV', 'cat110_AW', 'cat110_AX', 'cat110_AY', 'cat110_B', 'cat110_BA', 'cat110_BB', 'cat110_BC', 'cat110_BD', 'cat110_BE', 'cat110_BF', 'cat110_BG', 'cat110_BI', 'cat110_BJ', 'cat110_BK', 'cat110_BL', 'cat110_BM', 'cat110_BN', 'cat110_BO', 'cat110_BP', 'cat110_BQ', 'cat110_BR', 'cat110_BS', 'cat110_BT', 'cat110_BU', 'cat110_BV', 'cat110_BW', 'cat110_BX', 'cat110_BY', 'cat110_C', 'cat110_CB', 'cat110_CC', 'cat110_CD', 'cat110_CF', 'cat110_CG', 'cat110_CH', 'cat110_CI', 'cat110_CJ', 'cat110_CK', 'cat110_CL', 'cat110_CM', 'cat110_CN', 'cat110_CO', 'cat110_CP', 'cat110_CQ', 'cat110_CR', 'cat110_CS', 'cat110_CT', 'cat110_CU', 'cat110_CV', 'cat110_CW', 'cat110_CX', 'cat110_CY', 'cat110_D', 'cat110_DA', 'cat110_DB', 'cat110_DC', 'cat110_DD', 'cat110_DE', 'cat110_DF', 'cat110_DG', 'cat110_DH', 'cat110_DI', 'cat110_DJ', 'cat110_DK', 'cat110_DL', 'cat110_DM', 'cat110_DN', 'cat110_DO', 'cat110_DP', 'cat110_DQ', 'cat110_DR', 'cat110_DS', 'cat110_DT', 'cat110_DU', 'cat110_DV', 'cat110_DW', 'cat110_DX', 'cat110_DY', 'cat110_E', 'cat110_EA', 'cat110_EB', 'cat110_ED', 'cat110_EE', 'cat110_EF', 'cat110_EG', 'cat110_EH', 'cat110_EI', 'cat110_EJ', 'cat110_EK', 'cat110_EL', 'cat110_EM', 'cat110_G', 'cat110_H', 'cat110_I', 'cat110_J', 'cat110_K', 'cat110_L', 'cat110_N', 'cat110_O', 'cat110_P', 'cat110_Q', 'cat110_R', 'cat110_S', 'cat110_T', 'cat110_U', 'cat110_V', 'cat110_W', 'cat110_X', 'cat110_Y', 'cat111_A', 'cat111_B', 'cat111_C', 'cat111_D', 'cat111_E', 'cat111_F', 'cat111_G', 'cat111_I', 'cat111_K', 'cat111_M', 'cat111_O', 'cat111_Q', 'cat111_S', 'cat111_U', 'cat111_W', 'cat111_Y', 'cat112_A', 'cat112_AA', 'cat112_AB', 'cat112_AC', 'cat112_AD', 'cat112_AE', 'cat112_AF', 'cat112_AG', 'cat112_AH', 'cat112_AI', 'cat112_AJ', 'cat112_AK', 'cat112_AL', 'cat112_AM', 'cat112_AN', 'cat112_AO', 'cat112_AP', 'cat112_AQ', 'cat112_AR', 'cat112_AS', 'cat112_AT', 'cat112_AU', 'cat112_AV', 'cat112_AW', 'cat112_AX', 'cat112_AY', 'cat112_B', 'cat112_BA', 'cat112_C', 'cat112_D', 'cat112_E', 'cat112_F', 'cat112_G', 'cat112_H', 'cat112_I', 'cat112_J', 'cat112_K', 'cat112_L', 'cat112_M', 'cat112_N', 'cat112_O', 'cat112_P', 'cat112_Q', 'cat112_R', 'cat112_S', 'cat112_T', 'cat112_U', 'cat112_V', 'cat112_W', 'cat112_X', 'cat112_Y', 'cat113_A', 'cat113_AB', 'cat113_AC', 'cat113_AD', 'cat113_AE', 'cat113_AF', 'cat113_AG', 'cat113_AH', 'cat113_AI', 'cat113_AJ', 'cat113_AK', 'cat113_AL', 'cat113_AM', 'cat113_AN', 'cat113_AO', 'cat113_AP', 'cat113_AQ', 'cat113_AR', 'cat113_AS', 'cat113_AT', 'cat113_AU', 'cat113_AV', 'cat113_AW', 'cat113_AX', 'cat113_AY', 'cat113_B', 'cat113_BA', 'cat113_BB', 'cat113_BC', 'cat113_BD', 'cat113_BE', 'cat113_BF', 'cat113_BG', 'cat113_BH', 'cat113_BI', 'cat113_BJ', 'cat113_BK', 'cat113_BL', 'cat113_BM', 'cat113_BN', 'cat113_BO', 'cat113_C', 'cat113_E', 'cat113_F', 'cat113_G', 'cat113_H', 'cat113_I', 'cat113_J', 'cat113_K', 'cat113_L', 'cat113_M', 'cat113_N', 'cat113_O', 'cat113_P', 'cat113_Q', 'cat113_S', 'cat113_T', 'cat113_U', 'cat113_V', 'cat113_X', 'cat113_Y', 'cat114_A', 'cat114_B', 'cat114_C', 'cat114_D', 'cat114_E', 'cat114_F', 'cat114_G', 'cat114_I', 'cat114_J', 'cat114_L', 'cat114_N', 'cat114_O', 'cat114_Q', 'cat114_R', 'cat114_S', 'cat114_U', 'cat114_V', 'cat114_W', 'cat114_X', 'cat115_A', 'cat115_B', 'cat115_C', 'cat115_D', 'cat115_E', 'cat115_F', 'cat115_G', 'cat115_H', 'cat115_I', 'cat115_J', 'cat115_K', 'cat115_L', 'cat115_M', 'cat115_N', 'cat115_O', 'cat115_P', 'cat115_Q', 'cat115_R', 'cat115_S', 'cat115_T', 'cat115_U', 'cat115_W', 'cat115_X']\n"]}]},{"cell_type":"markdown","source":["# **3 Model Build \"Linear Regression\"**"],"metadata":{"id":"Ek1uDAwwwI5o"}},{"cell_type":"markdown","source":["## 3.1 Set the Target and Split the Data\n","\n","\n"],"metadata":{"id":"c0eqGRf8wLrb"}},{"cell_type":"code","source":["\n","X = df.drop(columns='loss')\n","y = df['loss']\n","\n","# Split the dataset into train, validation, and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)\n"],"metadata":{"id":"-TRbd6-hWGnE","executionInfo":{"status":"error","timestamp":1726427110897,"user_tz":240,"elapsed":3,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"c7a1a0da-5e4c-4205-e2f6-e17a138641ff","colab":{"base_uri":"https://localhost:8080/","height":216}},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'df' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-d318445f572d>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Split the dataset into train, validation, and test sets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"markdown","source":["## 3.2 Initialize the Model and Choose Hyperparameters\n","\n","\n"],"metadata":{"id":"nT2kbt9MWV7O"}},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","\n","lr = LinearRegression()\n","\n","# Define hyperparameters to tune using Grid Search\n","param_grid = {\n","    'fit_intercept': [True, False],  # Whether to calculate the intercept\n","    'positive': [True, False]        # Whether to force positive predictions\n","}\n","\n","# Perform Grid Search using training and validation sets\n","grid_search = GridSearchCV(estimator=lr, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')\n","# Train the model with the training data\n","grid_search.fit(X_train, y_train)\n","\n","# Best parameters found by Grid Search\n","print(f\"Best parameters: {grid_search.best_params_}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TCx-ybPkWPdx","executionInfo":{"status":"ok","timestamp":1725832066922,"user_tz":240,"elapsed":2019572,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"2e87a7c3-f401-403d-d4c6-8152aeb160b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:425: FitFailedWarning: \n","5 fits failed out of a total of 20.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","5 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 729, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1152, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_base.py\", line 711, in fit\n","    self.coef_ = optimize.nnls(X, y)[0]\n","  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_nnls.py\", line 93, in nnls\n","    raise RuntimeError(\"Maximum number of iterations reached.\")\n","RuntimeError: Maximum number of iterations reached.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:979: UserWarning: One or more of the test scores are non-finite: [              nan -4136111.44432523 -4216770.80814468 -4136129.75215896]\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters: {'fit_intercept': True, 'positive': False}\n"]}]},{"cell_type":"markdown","source":["## 3.3 Evaluate the Model"],"metadata":{"id":"HuyOje4eaOei"}},{"cell_type":"code","source":["y_val_pred = grid_search.best_estimator_.predict(X_val)\n","val_mse = mean_squared_error(y_val, y_val_pred)\n","val_r2 = r2_score(y_val, y_val_pred)\n","val_mae = mean_absolute_error(y_val, y_val_pred)\n","\n","print(f\"Validation Mean Squared Error: {val_mse}\")\n","print(f\"Validation R-squared: {val_r2}\")\n","print(f\"Validation Mean Absolute Error: {val_mae}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HcBrxGsQaaB7","executionInfo":{"status":"ok","timestamp":1725832700444,"user_tz":240,"elapsed":419,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"40469435-e08f-4325-a44e-ed801f4175f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Validation Mean Squared Error: 4540264.0021936195\n","Validation R-squared: 0.4914554779279988\n","Validation Mean Absolute Error: 1311.5328929388868\n"]}]},{"cell_type":"markdown","source":["## 3.4 Test the Best Model on the Test Set"],"metadata":{"id":"oZGbu0VgajA7"}},{"cell_type":"code","source":["y_test_pred = grid_search.best_estimator_.predict(X_test)\n","test_mse = mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","test_mae = mean_absolute_error(y_test, y_test_pred)\n","\n","print(f\"Test Mean Squared Error: {test_mse}\")\n","print(f\"Test R-squared: {test_r2}\")\n","print(f\"Test Mean Absolute Error: {test_mae}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J0LmnP65asDZ","executionInfo":{"status":"ok","timestamp":1725832704962,"user_tz":240,"elapsed":451,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"e4775e10-3c2a-4231-ab3a-39cb1d52d6e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Mean Squared Error: 3998447.4768036054\n","Test R-squared: 0.5099701470255702\n","Test Mean Absolute Error: 1293.5010502674713\n"]}]},{"cell_type":"code","source":["rmse = np.sqrt(test_mse)\n","print(rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_rAW5P5J_Mvl","executionInfo":{"status":"ok","timestamp":1725838486149,"user_tz":240,"elapsed":256,"user":{"displayName":"lorena milian","userId":"13433982353231795383"}},"outputId":"62d6ad5c-8401-425e-ce9f-1401738322b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1999.6118315322115\n"]}]}]}