{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"elapsed":8609,"status":"ok","timestamp":1730730146779,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"BkLwGsSxbXLV","outputId":"f509553e-2263-4c68-e756-1eecee30af0c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]},{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-0d52d4e7-c6a3-459b-8a18-b97f23c381c0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>cat1</th>\n","      <th>cat2</th>\n","      <th>cat3</th>\n","      <th>cat4</th>\n","      <th>cat5</th>\n","      <th>cat6</th>\n","      <th>cat7</th>\n","      <th>cat8</th>\n","      <th>cat9</th>\n","      <th>...</th>\n","      <th>cont6</th>\n","      <th>cont7</th>\n","      <th>cont8</th>\n","      <th>cont9</th>\n","      <th>cont10</th>\n","      <th>cont11</th>\n","      <th>cont12</th>\n","      <th>cont13</th>\n","      <th>cont14</th>\n","      <th>loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.718367</td>\n","      <td>0.335060</td>\n","      <td>0.30260</td>\n","      <td>0.67135</td>\n","      <td>0.83510</td>\n","      <td>0.569745</td>\n","      <td>0.594646</td>\n","      <td>0.822493</td>\n","      <td>0.714843</td>\n","      <td>2213.18</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.438917</td>\n","      <td>0.436585</td>\n","      <td>0.60087</td>\n","      <td>0.35127</td>\n","      <td>0.43919</td>\n","      <td>0.338312</td>\n","      <td>0.366307</td>\n","      <td>0.611431</td>\n","      <td>0.304496</td>\n","      <td>1283.60</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.289648</td>\n","      <td>0.315545</td>\n","      <td>0.27320</td>\n","      <td>0.26076</td>\n","      <td>0.32446</td>\n","      <td>0.381398</td>\n","      <td>0.373424</td>\n","      <td>0.195709</td>\n","      <td>0.774425</td>\n","      <td>3005.09</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>B</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.440945</td>\n","      <td>0.391128</td>\n","      <td>0.31796</td>\n","      <td>0.32128</td>\n","      <td>0.44467</td>\n","      <td>0.327915</td>\n","      <td>0.321570</td>\n","      <td>0.605077</td>\n","      <td>0.602642</td>\n","      <td>939.85</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>...</td>\n","      <td>0.178193</td>\n","      <td>0.247408</td>\n","      <td>0.24564</td>\n","      <td>0.22089</td>\n","      <td>0.21230</td>\n","      <td>0.204687</td>\n","      <td>0.202213</td>\n","      <td>0.246011</td>\n","      <td>0.432606</td>\n","      <td>2763.85</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 132 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d52d4e7-c6a3-459b-8a18-b97f23c381c0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0d52d4e7-c6a3-459b-8a18-b97f23c381c0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0d52d4e7-c6a3-459b-8a18-b97f23c381c0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0098eebb-98fc-4400-8a74-8a80aa30e37c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0098eebb-98fc-4400-8a74-8a80aa30e37c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0098eebb-98fc-4400-8a74-8a80aa30e37c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["   id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont6     cont7  \\\n","0   1    A    B    A    B    A    A    A    A    B  ...  0.718367  0.335060   \n","1   2    A    B    A    A    A    A    A    A    B  ...  0.438917  0.436585   \n","2   5    A    B    A    A    B    A    A    A    B  ...  0.289648  0.315545   \n","3  10    B    B    A    B    A    A    A    A    B  ...  0.440945  0.391128   \n","4  11    A    B    A    B    A    A    A    A    B  ...  0.178193  0.247408   \n","\n","     cont8    cont9   cont10    cont11    cont12    cont13    cont14     loss  \n","0  0.30260  0.67135  0.83510  0.569745  0.594646  0.822493  0.714843  2213.18  \n","1  0.60087  0.35127  0.43919  0.338312  0.366307  0.611431  0.304496  1283.60  \n","2  0.27320  0.26076  0.32446  0.381398  0.373424  0.195709  0.774425  3005.09  \n","3  0.31796  0.32128  0.44467  0.327915  0.321570  0.605077  0.602642   939.85  \n","4  0.24564  0.22089  0.21230  0.204687  0.202213  0.246011  0.432606  2763.85  \n","\n","[5 rows x 132 columns]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n","file_path = '/content/drive/MyDrive/claims_data.csv'\n","#file_path = '/content/drive/MyDrive/Colab Notebooks/claims_data.csv'\n","df = pd.read_csv(file_path)\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"2ikJ4ND4-o5q"},"source":["# DM"]},{"cell_type":"markdown","metadata":{"id":"EZUbRdGPhxOS"},"source":["**One Hot Encoding**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3010,"status":"ok","timestamp":1730730152623,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"prtZ5KI_-mVa","outputId":"592a8872-78cf-43c2-ce68-4f3d16aec22e"},"outputs":[{"name":"stdout","output_type":"stream","text":["   id     cont1     cont2     cont3     cont4     cont5     cont6     cont7  \\\n","0   1  0.726300  0.245921  0.187583  0.789639  0.310061  0.718367  0.335060   \n","1   2  0.330514  0.737068  0.592681  0.614134  0.885834  0.438917  0.436585   \n","2   5  0.261841  0.358319  0.484196  0.236924  0.397069  0.289648  0.315545   \n","3  10  0.321594  0.555782  0.527991  0.373816  0.422268  0.440945  0.391128   \n","4  11  0.273204  0.159990  0.527991  0.473202  0.704268  0.178193  0.247408   \n","\n","     cont8    cont9  ...  cat116_P  cat116_Q  cat116_R  cat116_S  cat116_T  \\\n","0  0.30260  0.67135  ...     False     False     False     False     False   \n","1  0.60087  0.35127  ...     False     False     False     False     False   \n","2  0.27320  0.26076  ...     False     False     False     False     False   \n","3  0.31796  0.32128  ...     False     False     False     False     False   \n","4  0.24564  0.22089  ...     False     False     False     False     False   \n","\n","   cat116_U  cat116_V  cat116_W  cat116_X  cat116_Y  \n","0     False     False     False     False     False  \n","1     False     False     False     False     False  \n","2     False     False     False     False     False  \n","3     False     False     False     False     False  \n","4     False     False     False     False     False  \n","\n","[5 rows x 1155 columns]\n"]}],"source":["cat_columns = ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57', 'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64', 'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71', 'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78', 'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85', 'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92', 'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99', 'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106', 'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113', 'cat114', 'cat115', 'cat116']\n","\n","df_encoded = pd.get_dummies(df, columns=cat_columns)\n","\n","print(df_encoded.head())"]},{"cell_type":"markdown","metadata":{"id":"K-M7o0zrHy-l"},"source":["**Continuous Features**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":408,"status":"ok","timestamp":1730730158976,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"3LxcMyhEHZZp","outputId":"b22494af-0eda-419e-9cff-6788e6a20ceb"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","High Correlation Pairs:\n","cont11  cont12    0.994384\n","cont12  cont11    0.994384\n","cont1   cont9     0.929912\n","cont9   cont1     0.929912\n","cont6   cont10    0.883351\n","                    ...   \n","        cont2     0.015864\n","cont5   cont8     0.009015\n","cont8   cont5     0.009015\n","cont12  cont3     0.006111\n","cont3   cont12    0.006111\n","Length: 182, dtype: float64\n"]}],"source":["# Compute the correlation matrix\n","corr = df[df.columns[df.columns.str.startswith('cont')]].corr()\n","\n","# Find pairs of features with high correlation\n","high_corr_pairs = corr.abs().unstack().sort_values(ascending=False)\n","high_corr_pairs = high_corr_pairs[high_corr_pairs < 1]  # Exclude self-correlation\n","\n","print(\"\\nHigh Correlation Pairs:\")\n","print(high_corr_pairs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":509,"status":"ok","timestamp":1730730162910,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"-DwomiiUIkxt","outputId":"2c6cce5c-8f3d-4f08-a1eb-b14284278da8"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","DataFrame after removing original features:\n","            id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont4  \\\n","0            1    A    B    A    B    A    A    A    A    B  ...  0.789639   \n","1            2    A    B    A    A    A    A    A    A    B  ...  0.614134   \n","2            5    A    B    A    A    B    A    A    A    B  ...  0.236924   \n","3           10    B    B    A    B    A    A    A    A    B  ...  0.373816   \n","4           11    A    B    A    B    A    A    A    A    B  ...  0.473202   \n","...        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...   \n","188313  587620    A    B    A    A    A    A    A    A    B  ...  0.473202   \n","188314  587624    A    A    A    A    A    B    A    A    A  ...  0.802892   \n","188315  587630    A    B    A    A    A    A    A    B    B  ...  0.189137   \n","188316  587632    A    B    A    A    A    A    A    A    B  ...  0.383428   \n","188317  587633    B    A    A    B    A    A    A    A    A  ...  0.821574   \n","\n","           cont5     cont7    cont8    cont13    cont14     loss  \\\n","0       0.310061  0.335060  0.30260  0.822493  0.714843  2213.18   \n","1       0.885834  0.436585  0.60087  0.611431  0.304496  1283.60   \n","2       0.397069  0.315545  0.27320  0.195709  0.774425  3005.09   \n","3       0.422268  0.391128  0.31796  0.605077  0.602642   939.85   \n","4       0.704268  0.247408  0.24564  0.246011  0.432606  2763.85   \n","...          ...       ...      ...       ...       ...      ...   \n","188313  0.939556  0.289949  0.24564  0.333292  0.208216  1198.62   \n","188314  0.704268  0.382000  0.63475  0.318646  0.305872  1108.34   \n","188315  0.482436  0.370534  0.24564  0.339244  0.503888  5762.64   \n","188316  0.340543  0.562866  0.34987  0.654753  0.721707  1562.87   \n","188317  0.281143  0.533048  0.97123  0.810511  0.721460  4751.72   \n","\n","       average_cont9_cont1 average_cont10_cont6 average_cont12_cont11  \n","0                 0.698825             0.776733              0.582195  \n","1                 0.340892             0.439053              0.352309  \n","2                 0.261300             0.307054              0.377411  \n","3                 0.321437             0.442808              0.324743  \n","4                 0.247047             0.195246              0.203450  \n","...                    ...                  ...                   ...  \n","188313            0.327997             0.285894              0.221521  \n","188314            0.456106             0.406030              0.304775  \n","188315            0.471274             0.411836              0.444494  \n","188316            0.443028             0.621587              0.857959  \n","188317            0.920551             0.841352              0.939314  \n","\n","[188318 rows x 129 columns]\n"]}],"source":["# Combine features into a new features when they have a correlation of 88 or greater\n","df['average_cont9_cont1'] = (df['cont1'] + df['cont9']) / 2\n","df['average_cont10_cont6'] = (df['cont6'] + df['cont10']) / 2\n","df['average_cont12_cont11'] = (df['cont11'] + df['cont12']) / 2\n","\n","# Drop original features\n","df.drop(['cont11', 'cont12', 'cont1', 'cont9', 'cont6', 'cont10'], axis=1, inplace=True)\n","\n","print(\"\\nDataFrame after removing original features:\")\n","print(df)"]},{"cell_type":"markdown","metadata":{"id":"hHCk3LKTkDjg"},"source":["**Heatmap**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":699},"executionInfo":{"elapsed":986,"status":"ok","timestamp":1730730218445,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"ti-RehUuivEX","outputId":"52315bee-b9aa-4bd8-c72c-caee5757543a"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1200x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Compute the correlation matrix\n","corr = df[df.columns[df.columns.str.startswith('cont')]].corr()\n","\n","# Generate a mask\n","mask = np.triu(np.ones_like(corr, dtype=bool))\n","\n","# Plot the heatmap with the mask\n","plt.figure(figsize=(12, 8))\n","sns.heatmap(corr, mask=mask, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)\n","plt.title('Heatmap of Continuous Variables') # correlation\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"nRmhqSVeBhj4"},"source":["**Data Manipulation**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":133,"status":"ok","timestamp":1730730258596,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"wUca5P66InH2","outputId":"3cf033a5-8b28-4e63-fad7-2c9c533aba01"},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique pairs: {('cont11', 'cont12')}\n"]}],"source":["# Create a set to store unique pairs\n","unique_pairs = set()\n","\n","# Filter pairs\n","filtered_pairs = {\n","    pair: corr for pair, corr in high_corr_pairs.items()\n","    if pair[0] != pair[1] and corr >= 0.99\n","}\n","\n","# Add pairs to the set in a sorted order\n","for pair in filtered_pairs:\n","    sorted_pair = tuple(sorted(pair))\n","    unique_pairs.add(sorted_pair)\n","\n","print(\"Unique pairs:\", unique_pairs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":148,"status":"ok","timestamp":1730730261311,"user":{"displayName":"Maria Santos","userId":"03565560894986085861"},"user_tz":300},"id":"4z0fFlCDIo3_","outputId":"6f8cb3ec-8199-4c84-97df-900acb323ce7"},"outputs":[{"name":"stdout","output_type":"stream","text":["            id cat1 cat2 cat3 cat4 cat5 cat6 cat7 cat8 cat9  ...     cont4  \\\n","0            1    A    B    A    B    A    A    A    A    B  ...  0.789639   \n","1            2    A    B    A    A    A    A    A    A    B  ...  0.614134   \n","2            5    A    B    A    A    B    A    A    A    B  ...  0.236924   \n","3           10    B    B    A    B    A    A    A    A    B  ...  0.373816   \n","4           11    A    B    A    B    A    A    A    A    B  ...  0.473202   \n","...        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...   \n","188313  587620    A    B    A    A    A    A    A    A    B  ...  0.473202   \n","188314  587624    A    A    A    A    A    B    A    A    A  ...  0.802892   \n","188315  587630    A    B    A    A    A    A    A    B    B  ...  0.189137   \n","188316  587632    A    B    A    A    A    A    A    A    B  ...  0.383428   \n","188317  587633    B    A    A    B    A    A    A    A    A  ...  0.821574   \n","\n","           cont5     cont7    cont8    cont13    cont14     loss  \\\n","0       0.310061  0.335060  0.30260  0.822493  0.714843  2213.18   \n","1       0.885834  0.436585  0.60087  0.611431  0.304496  1283.60   \n","2       0.397069  0.315545  0.27320  0.195709  0.774425  3005.09   \n","3       0.422268  0.391128  0.31796  0.605077  0.602642   939.85   \n","4       0.704268  0.247408  0.24564  0.246011  0.432606  2763.85   \n","...          ...       ...      ...       ...       ...      ...   \n","188313  0.939556  0.289949  0.24564  0.333292  0.208216  1198.62   \n","188314  0.704268  0.382000  0.63475  0.318646  0.305872  1108.34   \n","188315  0.482436  0.370534  0.24564  0.339244  0.503888  5762.64   \n","188316  0.340543  0.562866  0.34987  0.654753  0.721707  1562.87   \n","188317  0.281143  0.533048  0.97123  0.810511  0.721460  4751.72   \n","\n","       average_cont9_cont1 average_cont10_cont6 average_cont12_cont11  \n","0                 0.698825             0.776733              0.582195  \n","1                 0.340892             0.439053              0.352309  \n","2                 0.261300             0.307054              0.377411  \n","3                 0.321437             0.442808              0.324743  \n","4                 0.247047             0.195246              0.203450  \n","...                    ...                  ...                   ...  \n","188313            0.327997             0.285894              0.221521  \n","188314            0.456106             0.406030              0.304775  \n","188315            0.471274             0.411836              0.444494  \n","188316            0.443028             0.621587              0.857959  \n","188317            0.920551             0.841352              0.939314  \n","\n","[188318 rows x 129 columns]\n"]}],"source":["# Drop features with a 1.0 correlation\n","for pair in unique_pairs:\n","    feature1, feature2 = pair\n","    new_feature_name = f'{feature1}_{feature2}'\n","\n","    # Rename feature1 to a new combined name\n","    if feature1 in df.columns:\n","        df = df.rename(columns={feature1: new_feature_name})\n","\n","    # Drop feature2 only if it exists in the columns\n","    if feature2 in df.columns:\n","        df = df.drop(columns=[feature2])\n","\n","print(df)"]},{"cell_type":"markdown","metadata":{"id":"eWS_fKbuUQiT"},"source":["# Model Gradient Boosting Machines (GBM)"]},{"cell_type":"markdown","metadata":{"id":"PHcPbD3r6xpf"},"source":["## **Original Model**\n","\n","*   Gradient Boosting Regressor (GBM) with Early Stopping\n","*   No Cross-Validation\n","*   Feature Engineering\n","*   Prints Feature importance\n","*   Model Evaluation with RMSE and RÂ²\n","\n","**Validation**\n","\n","*   RMSE: 2011.62\n","*   RÂ²: 0.546\n","\n","**Test**\n","\n","*   RMSE: 1854.77\n","*   RÂ²: 0.578"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"RRwNVpxrGxzO","outputId":"518b5029-9ae0-4e18-ec59-48f017dc690d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Feature Importance:\n","cat80_B      0.165134\n","cat80_D      0.131782\n","cat79_D      0.119374\n","cont7        0.094266\n","cont2        0.063569\n","               ...   \n","cat99_N      0.000000\n","cat110_EG    0.000000\n","cat110_EH    0.000000\n","cat110_EI    0.000000\n","cat110_C     0.000000\n","Length: 1154, dtype: float64\n","Validation RMSE: 2011.6247113056033, RÂ²: 0.5467458407869143\n","Test RMSE: 1854.7733237536202, RÂ²: 0.5783881344106008\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","from google.colab import drive\n","\n","drive.mount('/content/drive')\n","file_path = '/content/drive/MyDrive/claims_data.csv'\n","df = pd.read_csv(file_path)\n","\n","# Categorical Encoding\n","cat_columns = ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57', 'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64', 'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71', 'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78', 'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85', 'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92', 'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99', 'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106', 'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113', 'cat114', 'cat115', 'cat116']  # Ensure all categorical columns are included\n","df_encoded = pd.get_dummies(df, columns=cat_columns)\n","\n","# Combine highly correlated features\n","df['average_cont9_cont1'] = (df['cont1'] + df['cont9']) / 2\n","df['average_cont10_cont6'] = (df['cont6'] + df['cont10']) / 2\n","df['average_cont12_cont11'] = (df['cont11'] + df['cont12']) / 2\n","\n","# Drop original features\n","df = df.drop(columns=['cont1', 'cont9', 'cont6', 'cont10', 'cont11', 'cont12'])\n","\n","# Define target and features\n","X = df_encoded.drop(columns=['loss'])  #'loss target column\n","y = df_encoded['loss']\n","\n","# Split the data into train, validation, and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)\n","\n","# Initialize the Gradient Boosting Regressor\n","gbm = GradientBoostingRegressor(\n","    n_estimators=1000,\n","    learning_rate=0.1,\n","    max_depth=4,\n","    validation_fraction=0.2,  # Use 20% of the training data for validation\n","    tol=0.001,\n","    random_state=42\n",")\n","\n","# Train the model on training data\n","gbm.fit(X_train, y_train)\n","\n","# Feature importance based on the trained model\n","feature_importance = pd.Series(gbm.feature_importances_, index=X_train.columns)\n","print(\"Feature Importance:\")\n","print(feature_importance.sort_values(ascending=False))\n","\n","# Predict on validation and test data\n","y_val_pred = gbm.predict(X_val)\n","y_test_pred = gbm.predict(X_test)\n","\n","# Evaluate the model using RMSE and RÂ²\n","rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))\n","r2_val = r2_score(y_val, y_val_pred)\n","\n","rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n","r2_test = r2_score(y_test, y_test_pred)\n","\n","# Print evaluation results\n","print(f'Validation RMSE: {rmse_val}, RÂ²: {r2_val}')\n","print(f'Test RMSE: {rmse_test}, RÂ²: {r2_test}')\n"]},{"cell_type":"markdown","metadata":{"id":"oqI14kBnm-DL"},"source":["## **Baseline Model**\n","\n","*  Calculates a baseline model by predicting the mean of the training target (loss) for all validation and test sample\n","\n","**Baseline Validation**\n","\n","*   RMSE: 2988.00\n","*   RÂ²: -2.3395\n","\n","\n","**Baseline Test**\n","\n","*   RMSE: 2856 (worst than GBM)\n","*   RÂ²: -7.5642\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"wP9AU-com9js","outputId":"4c569126-ff21-49b5-b627-c052423641d5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Baseline Validation RMSE: 2988.003784239835, RÂ²: -2.3395516943747197e-05\n","Baseline Test RMSE: 2856.5121202720993, RÂ²: -7.564200998455561e-06\n"]},{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-8e1232589e6d>\u001b[0m in \u001b[0;36m<cell line: 74>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;31m# Train the model on training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m \u001b[0mgbm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;31m# Predict on validation and test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-> 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m         \u001b[0;31m# fit the boosting stages\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 783\u001b[0;31m         n_stages = self._fit_stages(\n\u001b[0m\u001b[1;32m    784\u001b[0m             \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    785\u001b[0m             \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stages\u001b[0;34m(self, X, y, raw_predictions, sample_weight, random_state, X_val, y_val, sample_weight_val, begin_at_stage, monitor)\u001b[0m\n\u001b[1;32m    877\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0;31m# fit next stage of trees\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m             raw_predictions = self._fit_stage(\n\u001b[0m\u001b[1;32m    880\u001b[0m                 \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stage\u001b[0;34m(self, i, X, y, raw_predictions, sample_weight, sample_mask, random_state, X_csc, X_csr)\u001b[0m\n\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 490\u001b[0;31m             tree.fit(\n\u001b[0m\u001b[1;32m    491\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneg_g_view\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-> 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m   1375\u001b[0m         \"\"\"\n\u001b[1;32m   1376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1377\u001b[0;31m         super()._fit(\n\u001b[0m\u001b[1;32m   1378\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    470\u001b[0m             )\n\u001b[1;32m    471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","from google.colab import drive\n","\n","# Load and preprocess data\n","drive.mount('/content/drive', force_remount=True)\n","file_path = '/content/drive/MyDrive/claims_data.csv'\n","df = pd.read_csv(file_path)\n","\n","# Categorical Encoding\n","cat_columns = ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8',\n","               'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15',\n","               'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22',\n","               'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29',\n","               'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36',\n","               'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43',\n","               'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50',\n","               'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57',\n","               'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64',\n","               'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71',\n","               'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78',\n","               'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85',\n","               'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92',\n","               'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99',\n","               'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106',\n","               'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113',\n","               'cat114', 'cat115', 'cat116']\n","df_encoded = pd.get_dummies(df, columns=cat_columns)\n","\n","# Drop original features\n","df_encoded = df_encoded.drop(columns=['cont1', 'cont9', 'cont6', 'cont10', 'cont11', 'cont12'])\n","\n","# Define target and features\n","X = df_encoded.drop(columns=['loss'])\n","y = df_encoded['loss']\n","\n","# Split the data into train, validation, and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)\n","\n","# Baseline model: Mean Model\n","baseline_mean = y_train.mean()\n","\n","# Predict the mean for validation and test sets\n","y_val_baseline = [baseline_mean] * len(y_val)\n","y_test_baseline = [baseline_mean] * len(y_test)\n","\n","# Evaluate the baseline model using RMSE and RÂ²\n","rmse_val_baseline = np.sqrt(mean_squared_error(y_val, y_val_baseline))\n","r2_val_baseline = r2_score(y_val, y_val_baseline)\n","\n","rmse_test_baseline = np.sqrt(mean_squared_error(y_test, y_test_baseline))\n","r2_test_baseline = r2_score(y_test, y_test_baseline)\n","\n","# Print baseline model evaluation results\n","print(f'Baseline Validation RMSE: {rmse_val_baseline}, RÂ²: {r2_val_baseline}')\n","print(f'Baseline Test RMSE: {rmse_test_baseline}, RÂ²: {r2_test_baseline}')\n","\n","# Train and evaluate the GBM model\n","# Initialize the Gradient Boosting Regressor\n","gbm = GradientBoostingRegressor(\n","    n_estimators=1000,\n","    learning_rate=0.1,\n","    max_depth=4,\n","    validation_fraction=0.2,\n","    tol=0.001,\n","    random_state=42\n",")\n","\n","# Train the model on training data\n","gbm.fit(X_train, y_train)\n","\n","# Predict on validation and test data\n","y_val_pred = gbm.predict(X_val)\n","y_test_pred = gbm.predict(X_test)\n","\n","# Evaluate the GBM model using RMSE and RÂ²\n","rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))\n","r2_val = r2_score(y_val, y_val_pred)\n","\n","rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n","r2_test = r2_score(y_test, y_test_pred)\n","\n","# Print GBM model evaluation results\n","print(f'GBM Validation RMSE: {rmse_val}, RÂ²: {r2_val}')\n","print(f'GBM Test RMSE: {rmse_test}, RÂ²: {r2_test}')"]},{"cell_type":"markdown","metadata":{"id":"yWo4uUh8VdBh"},"source":["## Bayesian Optimization\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FET403I8ypue"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","!pip install scikit-optimize\n","from skopt import BayesSearchCV\n","from skopt.space import Real, Integer\n","from google.colab import drive\n","\n","# Load and preprocess data\n","drive.mount('/content/drive', force_remount=True)\n","file_path = '/content/drive/MyDrive/claims_data.csv'\n","df = pd.read_csv(file_path)\n","\n","# Categorical Encoding\n","cat_columns = ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57', 'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64', 'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71', 'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78', 'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85', 'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92', 'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99', 'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106', 'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113', 'cat114', 'cat115', 'cat116']\n","df_encoded = pd.get_dummies(df, columns=cat_columns)\n","\n","# Drop original features\n","df_encoded = df_encoded.drop(columns=['cont1', 'cont9', 'cont6', 'cont10', 'cont11', 'cont12'])\n","\n","# Define target and features\n","X = df_encoded.drop(columns=['loss'])\n","y = df_encoded['loss']\n","\n","# Split the data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Define the parameter space for Bayesian Optimization\n","param_space = {\n","    'n_estimators': Integer(100, 500),  # Reduced upper limit to 500\n","    'learning_rate': Real(0.01, 0.2, 'log-uniform'),\n","    'max_depth': Integer(3, 10),\n","    'min_samples_split': Integer(2, 10),\n","    'min_samples_leaf': Integer(1, 10),\n","    'subsample': Real(0.6, 1.0, 'uniform')\n","}\n","\n","# Initialize the Gradient Boosting Regressor\n","gbm = GradientBoostingRegressor(random_state=42)\n","\n","# Set up Bayesian Optimization with cross-validation\n","opt = BayesSearchCV(\n","    estimator=gbm,\n","    search_spaces=param_space,\n","    n_iter=15,  # Reduced to 15 iterations\n","    cv=3,       # 3-fold cross-validation\n","    n_jobs=-1,  # Use all available cores\n","    random_state=42\n",")\n","\n","# Fit Bayesian Optimization model on training data\n","opt.fit(X_train, y_train)\n","\n","# Get the best model\n","best_gbm = opt.best_estimator_\n","\n","# Print the best hyperparameters found\n","print(\"Best Hyperparameters:\")\n","print(opt.best_params_)\n","\n","# Predict on test data\n","y_test_pred = best_gbm.predict(X_test)\n","\n","# Evaluate the model using RMSE and RÂ²\n","rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n","r2_test = r2_score(y_test, y_test_pred)\n","\n","# Print evaluation results\n","print(f'Test RMSE: {rmse_test}, RÂ²: {r2_test}')"]},{"cell_type":"markdown","metadata":{"id":"XyUGmMGjkCH8"},"source":["## **Randomized Grid Search**\n","It timed out after 5 hours"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PHJgMVC4LARf"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import OneHotEncoder\n","from scipy.stats import chi2_contingency\n","from google.colab import drive\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# Load the dataset\n","file_path = '/content/drive/MyDrive/claims_data.csv'\n","df = pd.read_csv(file_path)\n","\n","# Step 1: Data Manipulation - Combine Highly Correlated Continuous Features\n","# Combine features into new features when they have a correlation of 88 or greater\n","df['average_cont9_cont1'] = (df['cont1'] + df['cont9']) / 2\n","df['average_cont10_cont6'] = (df['cont6'] + df['cont10']) / 2\n","df['average_cont12_cont11'] = (df['cont11'] + df['cont12']) / 2\n","\n","# Drop the original features\n","df = df.drop(columns=['cont1', 'cont9', 'cont6', 'cont10', 'cont11', 'cont12'])\n","\n","# Step 2: Calculate the Correlation Matrix for Remaining Continuous Features\n","corr = df[df.columns[df.columns.str.startswith('cont')]].corr()\n","\n","# Step 3: Identify and Drop Highly Correlated Features (>= 0.99 Correlation)\n","# Create a set to store unique pairs\n","unique_pairs = set()\n","high_corr_pairs = corr.abs().unstack().sort_values(ascending=False)\n","filtered_pairs = {\n","    pair: corr for pair, corr in high_corr_pairs.items()\n","    if pair[0] != pair[1] and corr >= 0.99\n","}\n","\n","# Add pairs to the set in a sorted order\n","for pair in filtered_pairs:\n","    sorted_pair = tuple(sorted(pair))\n","    unique_pairs.add(sorted_pair)\n","\n","# Rename and drop features with very high correlation\n","for pair in unique_pairs:\n","    feature1, feature2 = pair\n","    new_feature_name = f'{feature1}_{feature2}'\n","\n","    # Rename feature1 to a new combined name\n","    if feature1 in df.columns:\n","        df = df.rename(columns={feature1: new_feature_name})\n","\n","    # Drop feature2 only if it exists in the columns\n","    if feature2 in df.columns:\n","        df = df.drop(columns=[feature2])\n","\n","# Step 4: Hot Encoding for Categorical Columns\n","cat_columns = ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18', 'cat19', 'cat20', 'cat21', 'cat22', 'cat23', 'cat24', 'cat25', 'cat26', 'cat27', 'cat28', 'cat29', 'cat30', 'cat31', 'cat32', 'cat33', 'cat34', 'cat35', 'cat36', 'cat37', 'cat38', 'cat39', 'cat40', 'cat41', 'cat42', 'cat43', 'cat44', 'cat45', 'cat46', 'cat47', 'cat48', 'cat49', 'cat50', 'cat51', 'cat52', 'cat53', 'cat54', 'cat55', 'cat56', 'cat57', 'cat58', 'cat59', 'cat60', 'cat61', 'cat62', 'cat63', 'cat64', 'cat65', 'cat66', 'cat67', 'cat68', 'cat69', 'cat70', 'cat71', 'cat72', 'cat73', 'cat74', 'cat75', 'cat76', 'cat77', 'cat78', 'cat79', 'cat80', 'cat81', 'cat82', 'cat83', 'cat84', 'cat85', 'cat86', 'cat87', 'cat88', 'cat89', 'cat90', 'cat91', 'cat92', 'cat93', 'cat94', 'cat95', 'cat96', 'cat97', 'cat98', 'cat99', 'cat100', 'cat101', 'cat102', 'cat103', 'cat104', 'cat105', 'cat106', 'cat107', 'cat108', 'cat109', 'cat110', 'cat111', 'cat112', 'cat113', 'cat114', 'cat115', 'cat116']\n","df_encoded = pd.get_dummies(df, columns=cat_columns)\n","\n","# Step 5: Remove Zero-Importance Features Using Initial GBM Model\n","gbm = GradientBoostingRegressor(random_state=42)\n","gbm.fit(df_encoded.drop(columns=['loss']), df_encoded['loss'])\n","feature_importance = pd.Series(gbm.feature_importances_, index=df_encoded.drop(columns=['loss']).columns)\n","important_features = feature_importance[feature_importance > 0].index\n","\n","# Filter DataFrame to Use Only Important Features\n","df_filtered = df_encoded[important_features]\n","X = df_filtered\n","y = df_encoded['loss']\n","\n","# Step 6: Split the Data into Train, Validation, and Test Sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)\n","\n","# Step 7: Define the Base Model for Tuning & Early Stopping\n","base_gbm = GradientBoostingRegressor(\n","    random_state=42,\n","    n_iter_no_change=10,  # Stop training if no improvement in 10 iterations\n","    validation_fraction=0.2  # Use 20% of training data for validation\n",")\n","\n","# Set up a smaller parameter grid for RandomizedSearchCV\n","param_dist = {\n","    'n_estimators': [200, 500],  # Smaller range to reduce combinations\n","    'learning_rate': [0.01, 0.05, 0.1],\n","    'max_depth': [3, 4]\n","    #'subsample': [0.8, 1.0],\n","    #'min_samples_split': [2, 5],\n","    #'min_samples_leaf': [1, 2]\n","}\n","\n","# Use RandomizedSearchCV to find the best parameters\n","random_search = RandomizedSearchCV(\n","    estimator=base_gbm,\n","    param_distributions=param_dist,\n","    n_iter=25,\n","    cv=2,  # Reduce CV folds to 2 for faster runtime\n","    scoring='neg_mean_squared_error',\n","    n_jobs=-1,\n","    random_state=42,\n","    verbose=1\n",")\n","\n","# Fit the model on the training data\n","random_search.fit(X_train, y_train)\n","\n","# Print the best parameters found by RandomizedSearchCV\n","print(\"Best Hyperparameters:\", random_search.best_params_)\n","\n","# Train the model using the best hyperparameters\n","best_gbm = random_search.best_estimator_\n","best_gbm.fit(X_train, y_train)\n","\n","# Evaluate on validation data\n","y_val_pred = best_gbm.predict(X_val)\n","rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))\n","r2_val = r2_score(y_val, y_val_pred)\n","print(f'Validation RMSE: {rmse_val}, RÂ²: {r2_val}')\n","\n","# Evaluate on test data\n","y_test_pred = best_gbm.predict(X_test)\n","rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n","r2_test = r2_score(y_test, y_test_pred)\n","print(f'Test RMSE: {rmse_test}, RÂ²: {r2_test}')"]},{"cell_type":"markdown","metadata":{"id":"84TBhVTLkHLR"},"source":["## Suggestions:\n","- Implement a grid search - krystal\n","- Maybe remove some of the parameter?  \n","- Have uniform data manipulation -Sedo\n","- Make sure you have a baseline model so you have something to compare it to.\n","- Bayesian optimization can be used instead"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TVB2hNi2p7k_"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}